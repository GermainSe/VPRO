#define MAIN_MEMORY_SIZE   1024*1024*1024 // in bytes -> 512 MB // [0 ~ 1073741824]
#define RF_SIZE  1024 // in entries, FIXED! each 24-bit
#define LM_SIZE  8192 // number of entries, each 16-bit wide

#ifndef NUM_CLUSTERS
#define NUM_CLUSTERS  1 // number of clusters
#endif
#ifndef NUM_VU_PER_CLUSTER
#define NUM_VU_PER_CLUSTER  1 // vector units per cluster
#endif
#define NUM_VECTORLANES  2 // per unit

// Main memory layout (32-bit)
#define MM_TEST_OPA 0x00000100
#define MM_TEST_OPB 0x00000200
#define MM_TEST_RES 0x00000000

// Local memory layout (16-bit)
#define LM_TEST_OPA 0x00000000 // size: 64 entries
#define LM_TEST_OPB 0x00000040 // size: 64 entries
#define LM_TEST_RES 0x00000080 // size: 64 entries

// Test pattern size (in entries)
#define NUM_TEST_ENTRIES 64


    uint32_t c, u;

    vpro_set_idmask(0xFFFFFFFF); // broadcast to all

    if (NUM_VU_PER_CLUSTER <= 1){
        printf_error("Test for 2 or more UNITS per Cluster!\n");
    }

    // DMA: transfer input data to all local memories of all clusters
    for (c=0; c<NUM_CLUSTERS; c++) {
        for (u=0; u<NUM_VU_PER_CLUSTER; u++) {
            if (u % 2 == 0){
                dma_ext1D_to_loc1D(c, MM_TEST_OPA, LM_BASE_VU(u) + LM_TEST_OPA, NUM_TEST_ENTRIES/2);
            } else {
                dma_ext1D_to_loc1D(c, MM_TEST_OPA + NUM_TEST_ENTRIES/2*2, LM_BASE_VU(u) + LM_TEST_OPA, NUM_TEST_ENTRIES/2);
            }
        }
    }
    /**
     *  broadcast load = 500 cycles
     */
    for (c=0; c<NUM_CLUSTERS; c++) {
         dma_ext1D_to_loc1D_broadcast(c, 0xffffffff, MM_TEST_OPB,
                           LM_TEST_OPB, NUM_TEST_ENTRIES/2);
    }

//    /**
//     *  NO broadcast load = 628 cycles
//     */
//    for (c=0; c<NUM_CLUSTERS; c++) {
//        for (u=0; u<NUM_VU_PER_CLUSTER; u++) {
//            dma_ext1D_to_loc1D(c, MM_TEST_OPB,
//                               LM_BASE_VU(u) + LM_TEST_OPB, NUM_TEST_ENTRIES / 2);
//        }
//    }

    for (c=0; c<NUM_CLUSTERS; c++) {
        dma_wait_to_finish(c);
    }

    printf_info("Unit 0:");
    sim_dump_local_memory(0, 0);
    sim_dump_register_file(0, 0, 0);
    printf_info("Unit 1:");
    sim_dump_local_memory(0, 1);
    sim_dump_register_file(0, 1, 0);

    /**
     * Load A
     */
    __builtin_vpro_instruction_word(LS, NONBLOCKING, IS_CHAIN, FUNC_LOADS, NO_FLAG_UPDATE,
                                    DST_ADDR(0, 1, 8),
                                    SRC1_ADDR(0, 1, 8),
                                    SRC2_IMM(LM_TEST_OPA), 7, 3);
    __builtin_vpro_instruction_word(0, NONBLOCKING, NO_CHAIN, FUNC_AND, NO_FLAG_UPDATE,
                                    DST_ADDR(0, 1, 8),
                                    SRC1_LS,
                                    SRC2_IMM(0xffffff), 7, 3);

    /**
     * CALC C (Result)
     */
    __builtin_vpro_instruction_word(LS, NONBLOCKING, IS_CHAIN, FUNC_LOADS, NO_FLAG_UPDATE,
                                    DST_ADDR(0, 1, 8),
                                    SRC1_ADDR(0, 1, 8),
                                    SRC2_IMM(LM_TEST_OPB), 7, 3);

    __builtin_vpro_instruction_word(0, NONBLOCKING, NO_CHAIN, FUNC_OR, NO_FLAG_UPDATE,
                                    DST_ADDR(128, 1, 8),
                                    SRC1_LS,
                                    SRC2_ADDR(0, 1, 8), 7, 3);

    /**
     * Store
     */
    __builtin_vpro_instruction_word(0, NONBLOCKING, IS_CHAIN, FUNC_ADD, NO_FLAG_UPDATE,
                                    DST_ADDR(128, 1, 8),
                                    SRC1_ADDR(128, 1, 8),
                                    SRC2_IMM(0x0), 7, 3);

    __builtin_vpro_instruction_word(LS, NONBLOCKING, NO_CHAIN, FUNC_STORE, NO_FLAG_UPDATE,
                                    DST_ADDR(0, 1, 8),
                                    SRC1_CHAINING(0),
                                    SRC2_IMM(LM_TEST_RES), 7, 3);

    // wait for ALL units to finish processing
    for (c = 0; c < NUM_CLUSTERS; c++) {
        vpro_wait_busy(c, 0xffffffff);
    }

    printf_info("Unit 0:");
    sim_dump_local_memory(0, 0);
    sim_dump_register_file(0, 0, 0);
    printf_info("Unit 1:");
    sim_dump_local_memory(0, 1);
    sim_dump_register_file(0, 1, 0);



    // DMA: transfer result data back to main memory
    for (c = 0; c < NUM_CLUSTERS; c++) {
        for (u=0; u<NUM_VU_PER_CLUSTER; u++) {
            if (u % 2 == 0) {
                dma_loc1D_to_ext1D(c, MM_TEST_RES,
                                   LM_TEST_RES + LM_BASE_VU(u), NUM_TEST_ENTRIES/2);
            } else {
                dma_loc1D_to_ext1D(c, MM_TEST_RES + NUM_TEST_ENTRIES/2*2,
                                   LM_TEST_RES + LM_BASE_VU(u), NUM_TEST_ENTRIES/2);
            }
        }
    }
    for (c=0; c<NUM_CLUSTERS; c++) {
        dma_wait_to_finish(c);
    }
